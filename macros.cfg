# this file contains all Printer Macros

#####################################
#         needed macros             #
#####################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
# Parameters
gcode:
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    {% set y_start = 10 %}          ; set Y primeline start point
    {% set y_end_offset = 30 %}     ; set second Y primeline stop point
    {% set x_start = 5 %}        ; set X primeline start point

    M140 S{bedtemp}                 ; preheat printbed without waiting
    G28                             ; homing all axes
    G1 Z20 F240                     ; move nozzle away from bed    
    M190 S{bedtemp}                 ; set & wait for bed temp
    # <insert your routines here>
    M109 S{hotendtemp}              ; set & wait for hotend temp
    G28 Z                           ; homing Z again for heat expansion compensation during preheat
    BED_MESH_PROFILE LOAD=default   ; loading default mesh profile
    # <insert your routines here>

    ;Prime Nozzle
    M117 Priming Nozzle
    G90
    M82
    G1 Y{y_start} X{x_start} F3000                  ; move X and Y to start position
    G1 Z0.30                                        ; move Z to start position
    G92 E0.0                                        ; reset extruder
    G1 E5.0 F1500                                   ; prime retracted distance after "Print_End", Warning > can cause blobs if print was not canceled via PRINT_END or CANCEL_PRINT
    G1 Y{y_start + 120} E15.0 F1500                 ; draw first prime line, Warning > substract E= -5.0 if line 124 is not used!
    G1 X{x_start + 1} F3000                         ; offset X +1mm for second primeline 
    G1 Y{y_start + y_end_offset} E25.0 F1500        ; draw second prime line, Warning > substract E= -5.0 if line 124 is not used!
    G1 E24.5 F2500                                  ; retract to prevent stringing
    G1 Y{y_start + y_end_offset - 0.5 } F1000       ; wipe nozzle 
    G1 Y{y_start + y_end_offset + 5.0 } F1000       ; wipe nozzle
    G92 E0.0                                        ; reset extruder
    G1 Z5                                           ; lift nozzle 
    ;Priming finished
    M117 Printing

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament

    TURN_OFF_HEATERS

    G90                                                         ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F2000                      ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600   ; park nozzle at rear
    M107                                                        ; turn off fan
 
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    PRINT_END
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT



#####################################
#         optional macros           #
#####################################

[gcode_macro BLTouch_Test]
; BLTouch Funktionstest GT2560
description: Funktionstest im "touch_mode"
gcode:
    BLTOUCH_DEBUG COMMAND=pin_down
    QUERY_PROBE
    G4 P200
    QUERY_PROBE
    BLTOUCH_DEBUG COMMAND=pin_up
    QUERY_PROBE
    G4 P200
    QUERY_PROBE
    BLTOUCH_DEBUG COMMAND=touch_mode
    QUERY_PROBE
    G4 P200
    BLTOUCH_DEBUG COMMAND=pin_down
    G4 P200
    QUERY_PROBE
    BLTOUCH_DEBUG COMMAND=pin_up
    G4 P200
    BLTOUCH_DEBUG COMMAND=reset
    QUERY_PROBE
    G4 P200
    QUERY_PROBE

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state